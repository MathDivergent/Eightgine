# [[Defaults]]
set(EIGHTGINE_MESSAGE_HIDE_MODES "VERBOSE" "CHECK_START" "CHECK_PASS" "CHECK_FAIL")
set(EIGHTGINE_BUILD_TYPE_POSTFIXES "" "_DEBUG" "_RELEASE" "_RELWITHDEBINFO" "_MINSIZEREL")

if(CMAKE_BUILD_TYPE STREQUAL "Release")
    set(EIGHTGINE_BIULD_POSTFIX "${CMAKE_RELEASE_POSTFIX}")
elseif(CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(EIGHTGINE_BIULD_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
elseif(CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
    set(EIGHTGINE_BIULD_POSTFIX "${CMAKE_RELWITHDEBINFO_POSTFIX}")
elseif(CMAKE_BUILD_TYPE STREQUAL "MinSizeRel")
    set(EIGHTGINE_BIULD_POSTFIX "${CMAKE_MINSIZEREL_POSTFIX}")
endif()

if(BUILD_SHARED_LIBS)
    set(EIGHTGINE_DEFAULT_MODULE_TYPE SHARED)
else()
    set(EIGHTGINE_DEFAULT_MODULE_TYPE STATIC)
endif()

set(EIGHTGINE_DIRTY_MODULE_OR_EXECUTABLE_NAME_PREFIX "8")
set(EIGHTGINE_COMMAND_NAME_PREFIX "x")

if(WIN32)
    set(EIGHTGINE_MODULE_EXPORT "__declspec(dllexport)")
    set(EIGHTGINE_MODULE_IMPORT "__declspec(dllimport)")
else()
    set(EIGHTGINE_MODULE_EXPORT "__attribute__((visibility(\"default\")))")
    set(EIGHTGINE_MODULE_IMPORT "")
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(EIGHTGINE_DEBUG 1)
else()
    set(EIGHTGINE_DEBUG 0)
endif()

if(CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
    set(EIGHTGINE_RELWITHDEBINFO 1)
else()
    set(EIGHTGINE_RELWITHDEBINFO 0)
endif()

if(WIN32)
    set(EIGHTGINE_PLATFORM_WINDOWS 1)
    set(EIGHTGINE_BIN_TYPE "dll")
else()
    set(EIGHTGINE_PLATFORM_WINDOWS 0)
endif()

if(LINUX)
    set(EIGHTGINE_PLATFORM_LINUX 1)
    set(EIGHTGINE_BIN_TYPE "so")
    set(EIGHTGINE_RPATH "$ORIGIN")
else()
    set(EIGHTGINE_PLATFORM_LINUX 0)
endif()

if(APPLE)
    set(EIGHTGINE_PLATFORM_MACOS 1)
    set(EIGHTGINE_BIN_TYPE "dylib")
    set(EIGHTGINE_RPATH "@loader_path/../Frameworks")
else()
    set(EIGHTGINE_PLATFORM_MACOS 0)
endif()

add_compile_definitions("EIGHTGINE_DEBUG=${EIGHTGINE_DEBUG}")
add_compile_definitions("EIGHTGINE_RELWITHDEBINFO=${EIGHTGINE_RELWITHDEBINFO}")

add_compile_definitions("EIGHTGINE_PLATFORM_WINDOWS=${EIGHTGINE_PLATFORM_WINDOWS}")
add_compile_definitions("EIGHTGINE_PLATFORM_LINUX=${EIGHTGINE_PLATFORM_LINUX}")
add_compile_definitions("EIGHTGINE_PLATFORM_MACOS=${EIGHTGINE_PLATFORM_MACOS}")

add_custom_target("EIGHTGINE_MOCK_MODULE_OR_EXECUTABLE" ALL)


# [[Macros]]
macro(message)
    _eightgine_message(${ARGV})
endmacro()

macro(install)
    # pass install
endmacro()

macro(_eightgine_bin_dir EIGHTGINE_BIN_DIR)
    if(EIGHTGINE_PLATFORM_WINDOWS)
        set(${EIGHTGINE_BIN_DIR} "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
    elseif(EIGHTGINE_PLATFORM_LINUX OR EIGHTGINE_PLATFORM_MACOS)
        set(${EIGHTGINE_BIN_DIR} "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
    endif()
endmacro()

macro(_eightgine_set_module_or_executable MODULE_OR_EXECUTABLE_NAME)
    set(DIRTY_${MODULE_OR_EXECUTABLE_NAME} "${EIGHTGINE_DIRTY_MODULE_OR_EXECUTABLE_NAME_PREFIX}${${MODULE_OR_EXECUTABLE_NAME}}")
endmacro()

macro(_eightgine_get_module_or_executable MODULE_OR_EXECUTABLE_NAME)
    _eightgine_set_module_or_executable(${MODULE_OR_EXECUTABLE_NAME})

    if(NOT TARGET "${DIRTY_${MODULE_OR_EXECUTABLE_NAME}}")
        set(DIRTY_${MODULE_OR_EXECUTABLE_NAME} "${${MODULE_OR_EXECUTABLE_NAME}}")
    endif()
endmacro()

macro(_eightgine_get_module_or_executable_scope MODULE_OR_EXECUTABLE_NAME)
    _eightgine_get_module_or_executable(${MODULE_OR_EXECUTABLE_NAME})

    get_target_property(MODULE_OR_EXECUTABLE_TYPE "${DIRTY_${MODULE_OR_EXECUTABLE_NAME}}" TYPE)
    if(MODULE_OR_EXECUTABLE_TYPE STREQUAL "INTERFACE_LIBRARY")
        set(${MODULE_OR_EXECUTABLE_NAME}_EXTERNAL "INTERFACE")
        set(${MODULE_OR_EXECUTABLE_NAME}_INTERNAL "INTERFACE")
    else()
        set(${MODULE_OR_EXECUTABLE_NAME}_EXTERNAL "PUBLIC")
        set(${MODULE_OR_EXECUTABLE_NAME}_INTERNAL "PRIVATE")
    endif()
endmacro()


# [[Functions]]
function(_eightgine_message)
    if("${ARGV0}" IN_LIST EIGHTGINE_MESSAGE_HIDE_MODES)
        return()
    endif()
    _message(${ARGV})
endfunction()

function(eightgine_add_symlink)
    set(ONE_VALUE_ARGS
        ORIGINAL_NAME
        LINK_NAME
    )
    cmake_parse_arguments("ARG" "" "${ONE_VALUE_ARGS}" "" ${ARGN})

    file(TO_NATIVE_PATH "${ARG_ORIGINAL_NAME}" ORIGINAL_NAME_NATIVE)
    file(TO_NATIVE_PATH "${ARG_LINK_NAME}" LINK_NAME_NATIVE)

    get_filename_component(ORIGINAL_NAME_ABS "${ORIGINAL_NAME_NATIVE}" ABSOLUTE)
    get_filename_component(ORIGINAL_NAME_REAL "${ORIGINAL_NAME_ABS}" REALPATH)

    get_filename_component(LINK_NAME_ABS "${LINK_NAME_NATIVE}" ABSOLUTE)
    get_filename_component(LINK_NAME_REAL "${LINK_NAME_ABS}" REALPATH)

    if(ORIGINAL_NAME_REAL STREQUAL LINK_NAME_REAL)
        return()
    endif()

    if(NOT EXISTS "${LINK_NAME_NATIVE}")
        execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink "${ORIGINAL_NAME_NATIVE}" "${LINK_NAME_NATIVE}")
    endif()
endfunction()

function(_eightgine_file)
    set(ONE_VALUE_ARGS
        MODULE_OR_EXECUTABLE_SOURCES_FILES # out
    )
    set(MULTI_VALUE_ARGS
        MODULE_OR_EXECUTABLE_SOURCES_DIR MODULE_OR_EXECUTABLE_SOURCES_TYPES
    )
    cmake_parse_arguments("ARG" "" "${ONE_VALUE_ARGS}" "${MULTI_VALUE_ARGS}" ${ARGN})

    if(NOT ARG_MODULE_OR_EXECUTABLE_SOURCES_TYPES)
        set(ARG_MODULE_OR_EXECUTABLE_SOURCES_TYPES "cpp" "hpp" "c" "h")
    endif()

    foreach(SOURCE_TYPE IN LISTS ARG_MODULE_OR_EXECUTABLE_SOURCES_TYPES)
        list(APPEND SOURCES_EXPRESSIONS "${ARG_MODULE_OR_EXECUTABLE_SOURCES_DIR}/*.${SOURCE_TYPE}")
    endforeach()

    file(GLOB_RECURSE SOURCES_FILES ${SOURCES_EXPRESSIONS})
    set(${ARG_MODULE_OR_EXECUTABLE_SOURCES_FILES} ${SOURCES_FILES} PARENT_SCOPE)

    foreach(SOURCE_FILE IN LISTS SOURCES_FILES)
        get_filename_component(SOURCE_FILE_PATH "${SOURCE_FILE}" PATH)

        file(RELATIVE_PATH GROUP_NAME "${CMAKE_CURRENT_SOURCE_DIR}" "${SOURCE_FILE_PATH}")
        string(REPLACE "/" "\\" GROUP_NAME "${GROUP_NAME}")

        source_group("${GROUP_NAME}" FILES "${SOURCE_FILE}")
    endforeach()
endfunction()

function(eightgine_configure_module_or_executable)
    set(ONE_VALUE_ARGS
        MODULE_OR_EXECUTABLE_NAME
        MODULE_OR_EXECUTABLE_SCOPE
        MODULE_OR_EXECUTABLE_LIB_DIR
        MODULE_OR_EXECUTABLE_BIN_DIR
        MODULE_OR_EXECUTABLE_DESTINATION_DIR
    )
    set(MULTI_VALUE_ARGS
        MODULE_OR_EXECUTABLE_INCLUDE_DIR
        MODULE_OR_EXECUTABLE_SOURCES_DIR MODULE_OR_EXECUTABLE_SOURCES_FILES
        MODULE_OR_EXECUTABLE_DEFINITIONS
        MODULE_OR_EXECUTABLE_PROPERTIES
    )
    cmake_parse_arguments("ARG" "" "${ONE_VALUE_ARGS}" "${MULTI_VALUE_ARGS}" ${ARGN})

    _eightgine_get_module_or_executable(ARG_MODULE_OR_EXECUTABLE_NAME)
    _eightgine_get_module_or_executable_scope(ARG_MODULE_OR_EXECUTABLE_NAME)

    if(ARG_MODULE_OR_EXECUTABLE_SCOPE)
        if(ARG_MODULE_OR_EXECUTABLE_NAME_EXTERNAL STREQUAL "INTERFACE" AND NOT ARG_MODULE_OR_EXECUTABLE_SCOPE STREQUAL "INTERFACE")
            message(WARNING "IGNORE MODULE_OR_EXECUTABLE_SCOPE FOR: ${DIRTY_ARG_MODULE_OR_EXECUTABLE_NAME}")
        else()
            set(ARG_MODULE_OR_EXECUTABLE_NAME_EXTERNAL "${ARG_MODULE_OR_EXECUTABLE_SCOPE}")
        endif()
    endif()

    if(ARG_MODULE_OR_EXECUTABLE_INCLUDE_DIR)
        target_include_directories("${DIRTY_ARG_MODULE_OR_EXECUTABLE_NAME}" ${ARG_MODULE_OR_EXECUTABLE_NAME_EXTERNAL} ${ARG_MODULE_OR_EXECUTABLE_INCLUDE_DIR})
    endif()

    if(ARG_MODULE_OR_EXECUTABLE_SOURCES_DIR)
        foreach(SOURCES_DIR IN LISTS ARG_MODULE_OR_EXECUTABLE_SOURCES_DIR)
            _eightgine_file(MODULE_OR_EXECUTABLE_SOURCES_FILES SOURCES_FILES MODULE_OR_EXECUTABLE_SOURCES_DIR ${SOURCES_DIR})
            target_sources("${DIRTY_ARG_MODULE_OR_EXECUTABLE_NAME}" ${ARG_MODULE_OR_EXECUTABLE_NAME_INTERNAL} ${SOURCES_FILES})
        endforeach()
    endif()

    if(ARG_MODULE_OR_EXECUTABLE_SOURCES_FILES)
        foreach(SOURCE_FILE IN LISTS ARG_MODULE_OR_EXECUTABLE_SOURCES_FILES)
            if(EXISTS "${SOURCE_FILE}")
                list(APPEND SOURCES_FILES "${SOURCE_FILE}")
            else()
                message(WARNING "MISSING FILE: ${SOURCE_FILE}")
            endif()
        endforeach()

        target_sources("${DIRTY_ARG_MODULE_OR_EXECUTABLE_NAME}" ${ARG_MODULE_OR_EXECUTABLE_NAME_INTERNAL} ${SOURCES_FILES})
    endif()

    if(ARG_MODULE_OR_EXECUTABLE_LIB_DIR)
        target_link_directories("${DIRTY_ARG_MODULE_OR_EXECUTABLE_NAME}" ${ARG_MODULE_OR_EXECUTABLE_NAME_EXTERNAL} "${ARG_MODULE_OR_EXECUTABLE_LIB_DIR}")
    endif()

    if(ARG_MODULE_OR_EXECUTABLE_BIN_DIR)
        set(MODULE_OR_EXECUTABLE_BIN_FILE "${ARG_MODULE_OR_EXECUTABLE_NAME}.${EIGHTGINE_BIN_TYPE}")

        if(NOT EXISTS "${ARG_MODULE_OR_EXECUTABLE_BIN_DIR}/${MODULE_OR_EXECUTABLE_BIN_FILE}")
            message(WARNING "MISSING FILE: ${MODULE_OR_EXECUTABLE_BIN_FILE} IN DIR: ${ARG_MODULE_OR_EXECUTABLE_BIN_DIR}")
        else()
            set(MODULE_OR_EXECUTABLE_COMMAND_NAME "${EIGHTGINE_COMMAND_NAME_PREFIX}${DIRTY_ARG_MODULE_OR_EXECUTABLE_NAME}")

            if(NOT ARG_MODULE_OR_EXECUTABLE_DESTINATION_DIR)
                _eightgine_bin_dir(ARG_MODULE_OR_EXECUTABLE_DESTINATION_DIR)
            endif()

            add_custom_target("${MODULE_OR_EXECUTABLE_COMMAND_NAME}" ALL
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${ARG_MODULE_OR_EXECUTABLE_BIN_DIR}/${MODULE_OR_EXECUTABLE_BIN_FILE}"
                    "${ARG_MODULE_OR_EXECUTABLE_DESTINATION_DIR}/${MODULE_OR_EXECUTABLE_BIN_FILE}"
            )

            add_dependencies("EIGHTGINE_MOCK_MODULE_OR_EXECUTABLE" "${MODULE_OR_EXECUTABLE_COMMAND_NAME}")
        endif()
    endif()

    if(ARG_MODULE_OR_EXECUTABLE_DEFINITIONS)
        target_compile_definitions("${DIRTY_ARG_MODULE_OR_EXECUTABLE_NAME}" ${ARG_MODULE_OR_EXECUTABLE_NAME_EXTERNAL} ${ARG_MODULE_OR_EXECUTABLE_DEFINITIONS})
    endif()

    if(ARG_MODULE_OR_EXECUTABLE_PROPERTIES)
        set_target_properties("${DIRTY_ARG_MODULE_OR_EXECUTABLE_NAME}" PROPERTIES ${ARG_MODULE_OR_EXECUTABLE_PROPERTIES})
    endif()

    if(ARG_MODULE_OR_EXECUTABLE_DESTINATION_DIR)
        foreach(BUILD_TYPE_POSTFIX IN LISTS EIGHTGINE_BUILD_TYPE_POSTFIXES)
            set_target_properties("${DIRTY_ARG_MODULE_OR_EXECUTABLE_NAME}" PROPERTIES
                RUNTIME_OUTPUT_DIRECTORY${BUILD_TYPE_POSTFIX} "${ARG_MODULE_OR_EXECUTABLE_DESTINATION_DIR}"
                LIBRARY_OUTPUT_DIRECTORY${BUILD_TYPE_POSTFIX} "${ARG_MODULE_OR_EXECUTABLE_DESTINATION_DIR}"
            )
        endforeach()
    endif()
endfunction()

function(eightgine_add_module)
    set(ONE_VALUE_ARGS
        MODULE_NAME
        MODULE_ALIAS
        MODULE_TYPE
        MODULE_SCOPE
        MODULE_API_DEFINITION
        MODULE_LIB_DIR
        MODULE_BIN_DIR
        MODULE_DESTINATION_DIR
    )
    set(MULTI_VALUE_ARGS
        MODULE_INCLUDE_DIR
        MODULE_SOURCES_DIR MODULE_SOURCES_FILES
        MODULE_DEFINITIONS
        MODULE_PROPERTIES
    )
    cmake_parse_arguments("ARG" "" "${ONE_VALUE_ARGS}" "${MULTI_VALUE_ARGS}" ${ARGN})

    if(NOT ARG_MODULE_TYPE)
        set(ARG_MODULE_TYPE ${EIGHTGINE_DEFAULT_MODULE_TYPE})
    endif()

    _eightgine_set_module_or_executable(ARG_MODULE_NAME)

    add_library("${DIRTY_ARG_MODULE_NAME}" ${ARG_MODULE_TYPE})

    if(ARG_MODULE_ALIAS)
        add_library("${ARG_MODULE_ALIAS}" ALIAS "${DIRTY_ARG_MODULE_NAME}")
    endif()

   if(NOT ARG_MODULE_API_DEFINITION STREQUAL "OFF")
        string(TOUPPER "${ARG_MODULE_NAME}_API" MODULE_API_DEFINITION)
        if(ARG_MODULE_TYPE STREQUAL "INTERFACE")
            set(MODULE_DEFAULT_DEFINITIONS INTERFACE "${MODULE_API_DEFINITION}=${EIGHTGINE_MODULE_IMPORT}")
        elseif(ARG_MODULE_TYPE STREQUAL "SHARED")
            set(MODULE_DEFAULT_DEFINITIONS PRIVATE "${MODULE_API_DEFINITION}=${EIGHTGINE_MODULE_EXPORT}" INTERFACE "${MODULE_API_DEFINITION}=${EIGHTGINE_MODULE_IMPORT}")
        elseif(ARG_MODULE_TYPE STREQUAL "STATIC")
            set(MODULE_DEFAULT_DEFINITIONS PUBLIC "${MODULE_API_DEFINITION}=")
        endif()
    endif()

    if(EIGHTGINE_PLATFORM_LINUX)
        set(MODULE_DEFAULT_PROPERTIES BUILD_WITH_INSTALL_RPATH TRUE INSTALL_RPATH "${EIGHTGINE_RPATH}")
    elseif(EIGHTGINE_PLATFORM_MACOS)
        set(MODULE_DEFAULT_PROPERTIES INSTALL_NAME_DIR "@rpath" BUILD_WITH_INSTALL_RPATH TRUE INSTALL_RPATH "${EIGHTGINE_RPATH}")
    endif()

    eightgine_configure_module_or_executable(MODULE_OR_EXECUTABLE_NAME "${ARG_MODULE_NAME}"
        MODULE_OR_EXECUTABLE_SCOPE "${ARG_MODULE_SCOPE}"
        MODULE_OR_EXECUTABLE_LIB_DIR "${ARG_MODULE_LIB_DIR}"
        MODULE_OR_EXECUTABLE_BIN_DIR "${ARG_MODULE_BIN_DIR}"
        MODULE_OR_EXECUTABLE_DESTINATION_DIR ${ARG_MODULE_DESTINATION_DIR}
        MODULE_OR_EXECUTABLE_INCLUDE_DIR ${ARG_MODULE_INCLUDE_DIR}
        MODULE_OR_EXECUTABLE_SOURCES_DIR ${ARG_MODULE_SOURCES_DIR} MODULE_OR_EXECUTABLE_SOURCES_FILES ${ARG_MODULE_SOURCES_FILES}
        MODULE_OR_EXECUTABLE_DEFINITIONS
            ${MODULE_DEFAULT_DEFINITIONS}
            ${ARG_MODULE_DEFINITIONS}
        MODULE_OR_EXECUTABLE_PROPERTIES
            OUTPUT_NAME "${ARG_MODULE_NAME}"
            ${MODULE_DEFAULT_PROPERTIES}
            ${ARG_MODULE_PROPERTIES}
    )
endfunction()

function(eightgine_add_executable)
    set(ONE_VALUE_ARGS
        EXECUTABLE_NAME
        EXECUTABLE_DESTINATION_DIR
    )
    set(MULTI_VALUE_ARGS
        EXECUTABLE_INCLUDE_DIR
        EXECUTABLE_SOURCES_DIR EXECUTABLE_SOURCES_FILES
        EXECUTABLE_DEFINITIONS
        EXECUTABLE_PROPERTIES
    )
    cmake_parse_arguments("ARG" "" "${ONE_VALUE_ARGS}" "${MULTI_VALUE_ARGS}" ${ARGN})

    _eightgine_set_module_or_executable(ARG_EXECUTABLE_NAME)

    add_executable("${DIRTY_ARG_EXECUTABLE_NAME}")

    if(EIGHTGINE_PLATFORM_WINDOWS)
        set(EXECUTABLE_DEFAULT_PROPERTIES WIN32_EXECUTABLE TRUE)
    elseif(EIGHTGINE_PLATFORM_LINUX)
        set(EXECUTABLE_DEFAULT_PROPERTIES BUILD_WITH_INSTALL_RPATH TRUE INSTALL_RPATH "${EIGHTGINE_RPATH}")
    elseif(EIGHTGINE_PLATFORM_MACOS)
        set(EXECUTABLE_DEFAULT_PROPERTIES INSTALL_NAME_DIR "@rpath" BUILD_WITH_INSTALL_RPATH TRUE INSTALL_RPATH "${EIGHTGINE_RPATH}")
    endif()

    eightgine_configure_module_or_executable(MODULE_OR_EXECUTABLE_NAME "${ARG_EXECUTABLE_NAME}"
        MODULE_OR_EXECUTABLE_DESTINATION_DIR ${ARG_EXECUTABLE_DESTINATION_DIR}
        MODULE_OR_EXECUTABLE_INCLUDE_DIR ${ARG_EXECUTABLE_INCLUDE_DIR}
        MODULE_OR_EXECUTABLE_SOURCES_DIR ${ARG_EXECUTABLE_SOURCES_DIR} MODULE_OR_EXECUTABLE_SOURCES_FILES ${ARG_EXECUTABLE_SOURCES_FILES}
        MODULE_OR_EXECUTABLE_DEFINITIONS ${ARG_EXECUTABLE_DEFINITIONS}
        MODULE_OR_EXECUTABLE_PROPERTIES
            OUTPUT_NAME "${ARG_EXECUTABLE_NAME}"
            DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}"
            RELWITHDEBINFO_POSTFIX "${CMAKE_RELWITHDEBINFO_POSTFIX}"
            ${EXECUTABLE_DEFAULT_PROPERTIES}
            ${ARG_EXECUTABLE_PROPERTIES}
    )
endfunction()

function(eightgine_add_dependency)
    set(ONE_VALUE_ARGS
        MODULE_OR_EXECUTABLE_NAME
        DEPENDENCY_NAME
        DEPENDENCY_SCOPE
        DEPENDENCY_LIB_DIR
    )
    set(MULTI_VALUE_ARGS
        DEPENDENCY_INCLUDE_DIR
    )
    cmake_parse_arguments("ARG" "" "${ONE_VALUE_ARGS}" "${MULTI_VALUE_ARGS}" ${ARGN})

    _eightgine_get_module_or_executable(ARG_DEPENDENCY_NAME)

    if(ARG_MODULE_OR_EXECUTABLE_NAME)
        _eightgine_get_module_or_executable(ARG_MODULE_OR_EXECUTABLE_NAME)
        _eightgine_get_module_or_executable_scope(ARG_MODULE_OR_EXECUTABLE_NAME)

        if(ARG_DEPENDENCY_SCOPE)
            if(ARG_MODULE_OR_EXECUTABLE_NAME_EXTERNAL STREQUAL "INTERFACE" AND NOT ARG_DEPENDENCY_SCOPE STREQUAL "INTERFACE")
                message(WARNING "IGNORE DEPENDENCY_SCOPE FOR: ${ARG_DEPENDENCY_NAME}")
            else()
                set(ARG_MODULE_OR_EXECUTABLE_NAME_EXTERNAL "${ARG_DEPENDENCY_SCOPE}")
            endif()
        endif()

        if(DIRTY_ARG_MODULE_OR_EXECUTABLE_NAME STREQUAL DIRTY_ARG_DEPENDENCY_NAME)
            set(DIRTY_ARG_DEPENDENCY_NAME "${ARG_DEPENDENCY_NAME}")
        endif()

        if(TARGET "${DIRTY_ARG_DEPENDENCY_NAME}")
            add_dependencies("${DIRTY_ARG_MODULE_OR_EXECUTABLE_NAME}" "${DIRTY_ARG_DEPENDENCY_NAME}")
        endif()

        target_link_libraries("${DIRTY_ARG_MODULE_OR_EXECUTABLE_NAME}" ${ARG_MODULE_OR_EXECUTABLE_NAME_EXTERNAL} "${DIRTY_ARG_DEPENDENCY_NAME}")

        eightgine_configure_module_or_executable(MODULE_OR_EXECUTABLE_NAME "${ARG_MODULE_OR_EXECUTABLE_NAME}"
            MODULE_OR_EXECUTABLE_LIB_DIR "${ARG_DEPENDENCY_LIB_DIR}"
            MODULE_OR_EXECUTABLE_INCLUDE_DIR ${ARG_DEPENDENCY_INCLUDE_DIR}
            MODULE_OR_EXECUTABLE_SCOPE "${ARG_MODULE_OR_EXECUTABLE_NAME_EXTERNAL}"
        )
    else()
        if(TARGET "${DIRTY_ARG_DEPENDENCY_NAME}")
            add_dependencies("EIGHTGINE_MOCK_MODULE_OR_EXECUTABLE" "${DIRTY_ARG_DEPENDENCY_NAME}")
        endif()
    endif()
endfunction()
